openapi: "3.0.2"
info:
  title: DanceAcademy WebService Prototype
  version: "0.0.1"

servers:
  - url: http://localhost:3000/api/
    description: Dev Server
  - url: http://jsqna.com/api/
    description: (Not available yet) Demo Server

components:
  parameters:
    userIdPath:
      name: id
      in: path
      description: 사용자 ID
      required: true
      schema:
        type: integer
        format: int64

  responses:
    unauthorized:
      description: 401 - 인증 필요
      content:
        text/plain:
          example: 인증이 필요한 API입니다.
    forbidden:
      description: 403 - 권한 부족
      content:
        text/plain:
          example: 권한이 부족합니다.
    internalServerError:
      description: 500 - 알 수 없는 예외 발생
      content:
        text/plain:
          example: 서버 오류가 발생했습니다.

  schemas:

    UserCredentialCommon:
      type: object
      properties:
        email:
          type: string
          description: Email 형식이어야 합니다. 유일해야 하며 변경할 수 없습니다.
          example: demo@kbpf.com
        password:
          type: string
          description: 8글자 이상이어야 하며 특수문자를 포함해야 합니다.
          format: password
          example: test

    UserCommon:
      type: object
      properties:
        name:
          type: string
          description: 2-10글자 사이어야 하며 공백이 적용되지 않습니다.
          example: 한폴연
        mobile:
          type: string
          description: 전화번호 형식이어야 합니다. 검증은 하지 않습니다.
          example: 010-1230-0123
        address:
          type: string
          description: 시/군/구 명을 포함해야 합니다. 검증은 하지 않습니다.
          example: 서울시 종로구

    NewUserRequest:
      allOf:
          - type: object
            required:
              - email
              - password
              - name
              - mobile
              - address
            properties:
              email:
                type: string
                description: Email 형식이어야 합니다. 유일해야 하며 변경할 수 없습니다.
                example: demo@kbpf.com
          - $ref: '#/components/schemas/UserPatchRequest'
          
    UserPatchRequest:
      allOf:
        - $ref: '#/components/schemas/UserCommon'
        - type: object
          required:
            - password
            - name
            - mobile
            - address
          properties:
            password:
              type: string
              description: 8글자 이상이어야 하며 특수문자 포함입니다.
              format: password
              example: test
            role:
              type: string
              description: 관리자에 한정해 회원의 권한을 지정해 등록할 수 있습니다.
              example: 일반회원

    User:
      allOf:
        - type: object
          properties:
            email:
              type: string
              description: Email 형식이어야 합니다. 유일해야 하며 변경할 수 없습니다.
              example: demo@kbpf.com
            role:
              type: string
              example: 일반회원
        - $ref: '#/components/schemas/UserCommon'
        - $ref: "#/components/schemas/UserTicket"

    LoginRequest:
      allOf:
        - type: object
          required:
            - email
            - password
        - $ref: '#/components/schemas/UserCredentialCommon'

    LoginResponse:
      allOf:
        - $ref: "#/components/schemas/User"
        - type: object
          properties:
            email:
              type: string
              description: Email 형식이어야 합니다. 유일해야 하며 변경할 수 없습니다.
              example: demo@kbpf.com
            name:
              type: string
              description: 2-10글자 사이어야 하며 공백이 적용되지 않습니다.
              example: 한폴연
            accessToken:
              type: string
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9....
            refreshToken:
              type: string
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9....

    UserTicket:
      type: object
      properties:
        ticket_type:
          type: string
          description: 사용자의 이용권 명칭을 표시합니다.
          example: 주 2회 이용권
        ticket_expired_at:
          type: string
          description: 사용자의 이용권 만료시점을 표시합니다.
          example: 2020-12-26 12:00

  securitySchemes:
    auth:
      type: http
      scheme: bearer
      bearerFormat: JWT

tags:
  - name: Authentication
    description: 인증 API
  - name: User
    description: 회원 API

paths:
  /login:
    post:
      tags:
        - Authentication
      description: 권한 없이 로그인 가능
      # summary: 엔드포인트 바로 옆 텍스트
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"

      responses:
        "200":
          description: 로그인한 계정 정보 및 토큰 반환
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          description: 존재하지 않는 계정
          content:
            text/plain:
              example: 계정이 존재하지 않습니다.
        "500":
          $ref: "#/components/responses/internalServerError"

  /refresh:
    post:
      tags:
        - Authentication
      description: 유효한 토큰에 한정해 토큰 리프레시 제공
      requestBody:
        content:
          application/json:
            schema:
              required:
                  - refreshToken
              properties:
                refreshToken:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9....

      responses:
        "200":
          description: 엑세스 토큰 및 리프레시 토큰 재발급
          content:
            application/json:
              schema:
                required:
                  - accessToken
                  - refreshToken
                properties:
                  accessToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9....
                  refreshToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9....
        "400":
          description: 토큰이 만료되었거나 비정상 리프레시 토큰
          content:
            text/plain:
              example: 토큰이 만료되었거나 비정상 리프레시 토큰입니다.
        "500":
          $ref: "#/components/responses/internalServerError"

  /register:
    post:
      tags:
        - User
      description: 회원가입 성공 시 바로 Token 발행 (role은 권한 있는 사용자만 지정 가능)
      # summary: 엔드포인트 바로 옆 텍스트
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewUserRequest"

      responses:
        "201":
          description: 회원 가입한 계정 명의로 토큰 발행
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          description: 중복 계정으로 회원가입 시도
          content:
            text/plain:
              example: 중복된 계정입니다.
        "500":
          $ref: "#/components/responses/internalServerError"

  /users:
    get:
      tags:
        - User
      description: 전체 사용자 정보 조회
      summary: 사용자 전체 조회
      responses:
        "200":
          description: 해당 사용자 정보 반환
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "500":
          $ref: "#/components/responses/internalServerError"

  /users/{id}:
    get:
      tags:
        - User
      description: ID에 대응되는 사용자 정보 조회
      summary: 사용자 개별 조회
      parameters:
        - $ref: "#/components/parameters/userIdPath"

      responses:
        "200":
          description: 해당 사용자 정보 반환
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          description: 존재하지 않는 계정
          content:
            text/plain:
              example: 존재하지 않는 계정입니다.
        "500":
          $ref: "#/components/responses/internalServerError"

    patch:
      tags:
        - User
      description: ID에 대응되는 사용자 정보 수정 (Id, Email 제외, Role은 관리자만 변경 가능)
      parameters:
        - $ref: "#/components/parameters/userIdPath"

      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPatchRequest"
          
      responses:
        "200":
          description: 변경된 사용자 정보 반환
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          description: 존재하지 않는 계정
          content:
            text/plain:
              example: 존재하지 않는 계정입니다.
        "500":
          $ref: "#/components/responses/internalServerError"

    delete:
      tags:
        - User
      description: 사용자 ID에 대응되는 사용자를 제거 (SET deleted = 1)
      parameters:
        - $ref: "#/components/parameters/userIdPath"

      responses:
        "200":
          description: OK
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          description: 존재하지 않는 계정
          content:
            text/plain:
              example: 존재하지 않는 계정입니다.
        "500":
          $ref: "#/components/responses/internalServerError"